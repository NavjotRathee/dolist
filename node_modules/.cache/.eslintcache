[{"/Users/navjotrathee/Desktop/dolist/src/index.js":"1","/Users/navjotrathee/Desktop/dolist/src/App.js":"2","/Users/navjotrathee/Desktop/dolist/src/reportWebVitals.js":"3","/Users/navjotrathee/Desktop/dolist/src/components/ToDoList.js":"4","/Users/navjotrathee/Desktop/dolist/src/modals/CreateTask.js":"5"},{"size":535,"mtime":1652194636902,"results":"6","hashOfConfig":"7"},{"size":225,"mtime":1652195066375,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1652187434782,"results":"9","hashOfConfig":"7"},{"size":1033,"mtime":1652198499366,"results":"10","hashOfConfig":"7"},{"size":2004,"mtime":1652198396235,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13k1t1t",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"/Users/navjotrathee/Desktop/dolist/src/index.js",[],[],"/Users/navjotrathee/Desktop/dolist/src/App.js",[],[],"/Users/navjotrathee/Desktop/dolist/src/reportWebVitals.js",[],[],"/Users/navjotrathee/Desktop/dolist/src/components/ToDoList.js",[],[],"/Users/navjotrathee/Desktop/dolist/src/modals/CreateTask.js",["29"],[],"import React,{ useState } from 'react';\nimport {Button,Modal,ModalHeader,ModalBody,ModalFooter} from 'reactstrap';\n//import ToDoList from '../components/ToDoList';\n//import createTask from '../modals/createTask'\nconst CreateTask = ({modal,toggle,save}) => {\n    const [taskName, setTaskName]=useState('');\n    const [description, setDescription] = useState('');\n   \n    const handleChange = (e) => {\n       \n        const {name, value, save}= e.target;\n         if(name===\"taskName\"){\n             setTaskName(value);\n         }\n         else{\n             setDescription(value);\n         }\n    }\n\n    const handleSave = (e) => {\n        e.preventDefault()\n        console.log(\"saving details\");\n        let taskObj = {}\n        var temp1=taskName;\n        var temp2=description;\n        taskObj[\"Name\"] = temp1;\n        taskObj[\"Description\"] = temp2;\n        console.log(temp1 + \" \" +temp2);\n        save(taskObj);\n\n    }\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\n            <ModalBody>\n                <form>\n            \n                    <div className = \"form-group\">\n                        <label>Task Name</label>\n                        <input id=\"taskTitle\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\" />\n                    </div>\n                    <div className = \"form-group\">\n                        <label>Description</label>\n                        <textarea id=\"textTitle\" rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\n                    </div> \n                    </form>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button color=\"primary\" onClick={handleSave}>Create Task</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n            </ModalFooter>\n      </Modal>\n    );\n};\n\nexport default CreateTask;",[],{"ruleId":"30","severity":1,"message":"31","line":11,"column":29,"nodeType":"32","messageId":"33","endLine":11,"endColumn":33},"no-unused-vars","'save' is assigned a value but never used.","Identifier","unusedVar"]